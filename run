<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Micro:bit Interactive Kit</title>
  <style>
    body { font-family: sans-serif; padding: 20px; }
    button { width: 140px; height: 40px; margin: 4px; font-size: 14px; }
    #grid { display: flex; flex-wrap: wrap; width: 600px; margin-bottom: 20px; }
    #log { border: 1px solid #ccc; height: 150px; overflow-y: auto; padding: 4px; margin-top: 10px; white-space: pre-wrap; }
    input, #send { font-size: 16px; margin: 4px; }
  </style>
</head>
<body>
  <h2>Micro:bit Interactive Kit</h2>
  <button id="connect">Connect to Micro:bit</button>
  <div id="grid"></div>

  <h3>Keyboard Input (send text to micro:bit)</h3>
  <input type="text" id="message" placeholder="Type message here" size="30">
  <button id="send">Send</button>

  <h3>Log:</h3>
  <pre id="log"></pre>

  <script>
    let port, writer;
    const log = document.getElementById("log");

    // Default button labels
    const defaultLabels = [
      "LED1","LED2","LED3","LED4","LED5",
      "SMILE","SAD","HEART","STAR","CLEAR",
      "MUSIC1","MUSIC2","ARROWLEFT","ARROWRIGHT","FLASH",
      "BITMAP1","BITMAP2","YES","NO","RANDOM"
    ];

    const buttons = [];
    const commands = [...defaultLabels];

    async function connect() {
      try {
        port = await navigator.serial.requestPort();
        await port.open({ baudRate: 115200 });
        writer = port.writable.getWriter();
        logMessage("Connected to micro:bit!");
      } catch (err) {
        logMessage("Error: " + err);
      }
    }

    async function sendCommand(cmd) {
      if (!writer) { logMessage("Not connected!"); return; }
      await writer.write(new TextEncoder().encode(cmd + "\n"));
      logMessage("Sent: " + cmd);
    }

    function logMessage(msg) {
      log.innerText += msg + "\n";
      log.scrollTop = log.scrollHeight;
    }

    // Create editable buttons
    const grid = document.getElementById("grid");
    defaultLabels.forEach((label, index) => {
      const btn = document.createElement("button");
      btn.innerText = label;
      btn.onclick = () => sendCommand(commands[index]);
      btn.ondblclick = () => {
        const newLabel = prompt("Enter new button label:", btn.innerText);
        if (newLabel && newLabel.trim() !== "") {
          btn.innerText = newLabel.trim();
          commands[index] = newLabel.trim().toUpperCase();
        }
      };
      grid.appendChild(btn);
      buttons.push(btn);
    });

    // Keyboard input
    document.getElementById("send").addEventListener("click", () => {
      const text = document.getElementById("message").value;
      if (text.trim() !== "") {
        sendCommand(text.trim());
        document.getElementById("message").value = "";
      }
    });

    document.getElementById("message").addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        document.getElementById("send").click();
      }
    });

    document.getElementById("connect").addEventListener("click", connect);
  </script>
</body>
</html>
